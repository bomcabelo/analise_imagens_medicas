import os
import tempfile
import logging
from PIL import Image as PILImage
from agno.agent import Agent
from agno.models.google import Gemini
from agno.media import Image as AgnoImage
from agno.tools.tavily import TavilyTools
from textwrap import dedent
import streamlit as st
from dotenv import load_dotenv

# Configura√ß√£o inicial
load_dotenv()
logging.basicConfig(level=logging.INFO)

# Configura√ß√µes do Streamlit
st.set_page_config(page_title="An√°lise de Imagens M√©dicas", layout="centered", page_icon="ü©∫")
st.title("ü©∫ An√°lise de Imagens M√©dicas")
st.markdown(
    """
    Carregue uma **imagem m√©dica** (raio-X, resson√¢ncia, tomografia, ultrassom, etc.)
    e nosso agente de IA a analisar√°, fornecendo resultados detalhados, diagn√≥sticos e insights.  
    ‚ö†Ô∏è **Importante:** Sempre consulte profissionais de sa√∫de qualificados.
    """
)

# Verifica chaves de API
if not os.environ.get("GOOGLE_API_KEY"):
    st.error("‚ùå Defina sua chave de API do Google (GOOGLE_API_KEY) no arquivo .env")
    st.stop()
if not os.environ.get("TAVILY_API_KEY"):
    st.warning("‚ö†Ô∏è TAVILY_API_KEY n√£o definida. A pesquisa m√©dica ser√° limitada.")

# Escolha do modelo
st.sidebar.header("Configura√ß√£o do Modelo")
id_model = st.sidebar.selectbox(
    "Escolha o modelo Gemini",
    ("gemini-2.0-flash", "gemini-2.5-flash-preview-05-20"),
)

# Fun√ß√£o de pr√©-processamento
def preprocess_img(img_path):
    """Redimensiona e salva a imagem em um diret√≥rio tempor√°rio"""
    image = PILImage.open(img_path)
    width, height = image.size
    aspect_ratio = width / height
    img_width = 600
    img_height = int(img_width / aspect_ratio)
    resized_img = image.resize((img_width, img_height))

    temp_path = os.path.join(tempfile.gettempdir(), "temp_img.png")
    resized_img.save(temp_path)
    return temp_path, resized_img

# Formata√ß√£o da resposta
def format_res(res):
    res = res.strip().replace("```", "")
    if "</think>" in res:
        res = res.split("</think>")[-1].strip()
    return res

# Prompts e agentes
prompt_analysis = """
Voc√™ √© um especialista em diagn√≥stico por imagem.
Analise a imagem e responda em portugu√™s conforme a estrutura:

### 1. Tipo de imagem e regi√£o
### 2. Achados relevantes
### 3. Avalia√ß√£o diagn√≥stica
### 4. Explica√ß√£o em linguagem leiga
"""

med_agent = Agent(
    name="Medical Image Agent",
    role="Especialista em imagens m√©dicas",
    model=Gemini(id=id_model),
    markdown=True,
)

prompt_search_template = """Com base na seguinte an√°lise, realize uma pesquisa m√©dica:
Resultado da an√°lise: "{}"
"""

research_agent = Agent(
    name="Researcher Agent",
    role="Pesquisador m√©dico",
    instructions=dedent(
        """Voc√™ busca informa√ß√µes complementares sobre achados da imagem m√©dica.
        Forne√ßa fontes confi√°veis (PubMed, WHO, etc.) com links e resumos."""
    ),
    model=Gemini(id=id_model),
    tools=[TavilyTools()],
)

# Pipeline de an√°lise
def process_img_pipeline(agno_img):
    if agno_img is None:
        return "Erro: Nenhuma imagem fornecida."
    res = med_agent.run(prompt_analysis, images=[agno_img])
    analysis = res.content
    prompt_search = prompt_search_template.format(analysis)
    res_search = research_agent.run(prompt_search)
    return f"### üìã An√°lise:\n{format_res(analysis)}\n\n---\n\n### üìö Pesquisa:\n{format_res(res_search.content)}"

# Interface de upload
st.sidebar.header("üìÅ Enviar imagem")
uploaded_img = st.sidebar.file_uploader("Envie a imagem m√©dica", type=["jpg", "jpeg", "png", "bmp", "gif"])

if uploaded_img is not None:
    st.image(uploaded_img, caption="Imagem enviada", use_container_width=True)

    if st.sidebar.button("üîç Analisar imagem"):
        with st.spinner("Analisando imagem..."):
            temp_file = os.path.join(tempfile.gettempdir(), uploaded_img.name)
            with open(temp_file, "wb") as f:
                f.write(uploaded_img.getbuffer())

            temp_path, _ = preprocess_img(temp_file)
            agno_img = AgnoImage(filepath=temp_path)
            result = process_img_pipeline(agno_img)
            st.markdown(result, unsafe_allow_html=True)

            # Limpeza segura
            for path in [temp_file, temp_path]:
                try:
                    if os.path.exists(path):
                        os.remove(path)
                except Exception as e:
                    logging.warning(f"N√£o foi poss√≠vel remover {path}: {e}")
else:
    st.warning("‚ö†Ô∏è Carregue uma imagem m√©dica para iniciar a an√°lise.")
